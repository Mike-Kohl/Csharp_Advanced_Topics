Vector<T>
=========

From Intrinsics to Numerics
===========================
- Working directly with SSE/AVX support levels, data types and intrinsics is far 
  too much work for most people

- They want to write simpler code and have it be auto-vectorized using the
  most powerful available SIMD instructions
	Code may or may not be hardware accelerated

- Say hello to System.Numerics.Vectors
- What's in store
	Numeric-types: Complex, BigInteger
	SIMD-accelerated types (float-based):Matrix3x2, Matrix4x4, Plane, Quaternion
	Common vector sizes (float-based): Vector2, Vector3, Vector4
	General-Purpose Vector<T>

Vector<T>
=========
- A generalizationover VectorXxx<T> types where the size is not statically known
	You may not know the type of CPU your program runs on

- T can be a built-in numeric value type (integral, float, double)
- Can own data or provide a view into an existing array
- Check Vector<T>.Count for exact size
	On my machine, Vector<int>.Count gives 8
	This means we're using 256 bits (8 integers, each 32 bits long)

- Hardware accelerated
	Check IsHardwareAccelerated static member

- Use of intrinsics
	Addition and subtraction always use intrinsics
	Multiplication for short, int, float and double
	Division for float and double

Vector<T> Scenario
- I want to add two arrays of bytes
- Create and initialize arrays
- byte[] array1, array2, result;
- Determine how many fit into a Vactor<byte>
- Loop by register size
- Use vector as a view into an array


